// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider            = "mysql"
  url                 = env("DATABASE_URL")

}

model User {
  id              String        @id @default(uuid())
  nome            String
  email           String        @unique
  senha           String 
  tipo            String        @default("USER")
  qrCode          String?       @db.Text
  createdAt       DateTime      @default(now()) @db.DateTime(6)
  updatedAt       DateTime?     @updatedAt @db.Timestamp
  confirmed       Boolean       @default(false)
  userAtActivity  UserAtActivity[]


  @@map("users")
}


model Category {
  id           String     @id @default(uuid())
  nome         String     @db.VarChar(255)
  createdAt    DateTime   @default(now()) @db.DateTime(6)
  updatedAt    DateTime   @updatedAt @db.Timestamp
  atividades   Activity[]

  @@map("category")
}


model Activity {
  id                String     @id @default(uuid())
  nome              String     @db.VarChar(255)
  data              DateTime?   @db.Timestamp(6)
  vagas             Int?
  detalhes          String?
  palestranteNome   String     @db.VarChar(255)
  categoriaId       String
  createdAt         DateTime   @default(now()) @db.DateTime(6)
  updatedAt         DateTime   @updatedAt @db.Timestamp
  participantes     UserAtActivity[]

  @@map("atividades")
  
  // Relacionamentos
  categoria     Category   @relation(fields: [categoriaId], references: [id])
  
}

model UserAtActivity {
  id              String     @id @default(uuid())
  presente        Boolean
  inscricaoPrevia Boolean
  listaEspera     Boolean
  createdAt       DateTime  @default(now()) @db.DateTime(6)
  updatedAt       DateTime  @updatedAt @db.Timestamp

  // Relacionamentos com User e Activity
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  activityId  String
  activity    Activity  @relation(fields: [activityId], references: [id])

  @@map("userAtActivity")
}


